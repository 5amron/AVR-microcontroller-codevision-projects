;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/27/2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;
;flash char A[4][4]={{'7','8','9','/'},
;              {'4','5','6','X'},
;              {'1','2','3','-'},
;              {'O','0','=','+'}};
;
;
;// External Interrupt 2 service routine
;
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B char  columnNumber;
; 0000 002C char rowNumber;
; 0000 002D char position;
; 0000 002E         if(PIND.4==0){
;PCODE: $0000000F VOL: 0
;	columnNumber -> R17
;	rowNumber -> R16
;	position -> R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002F         columnNumber=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0030         }
; 0000 0031         if(PIND.5==0){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0032         columnNumber=1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033         }
; 0000 0034         if(PIND.6==0){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0035         columnNumber=2;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0036         }
; 0000 0037         if(PIND.7==0){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0038         columnNumber=3;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039         }
; 0000 003A 
; 0000 003B          DDRD.0=0  ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C          DDRD.1=0  ;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003D          DDRD.2=0 ;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003E          DDRD.3=0  ;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F          PORTD.0=1 ;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0040          PORTD.1=1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0041          PORTD.2=1 ;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0042          PORTD.3=1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0043          DDRD.4=1  ;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0044          DDRD.5=1  ;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0045          DDRD.6=1 ;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0046          DDRD.7=1  ;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0047          PORTD.4=0  ;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0048          PORTD.5=0  ;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0049          PORTD.6=0   ;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004A          PORTD.7=0   ;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004B 
; 0000 004C          if(PIND.3==0){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004D          rowNumber=3;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004E          }
; 0000 004F          if(PIND.2==0){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0050          rowNumber=2;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0051          }
; 0000 0052          if(PIND.1==0){
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0053          rowNumber=1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0054          }
; 0000 0055          if(PIND.0==0){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0056          rowNumber=0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0057          }
; 0000 0058 
; 0000 0059              lcd_putchar(A[rowNumber][columnNumber]);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005A              DDRD.7=0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005B              DDRD.6=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005C              DDRD.5=0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005D              DDRD.4=0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005E              DDRD.3=1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005F              DDRD.2=1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0060              DDRD.1=1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0061              DDRD.0=1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0062              PORTD.7=1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0063              PORTD.6=1;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0064              PORTD.5=1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0065              PORTD.4=1;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0066              PORTD.3=0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0067              PORTD.2=0;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0068              PORTD.1=0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069              PORTD.0=0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006A 
; 0000 006B }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;void main(void)
; 0000 006E {
;PCODE: $0000008F VOL: 0
; 0000 006F // Declare your local variables here
; 0000 0070 
; 0000 0071 // Input/Output Ports initialization
; 0000 0072 // Port A initialization
; 0000 0073 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0074 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0075 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0076 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0077 
; 0000 0078 // Port B initialization
; 0000 0079 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 007B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007D 
; 0000 007E // Port C initialization
; 0000 007F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0080 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0081 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0082 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0083 
; 0000 0084 // Port D initialization
; 0000 0085 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0086 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0087 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0088 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0089 
; 0000 008A // External Interrupt(s) initialization
; 0000 008B // INT0: Off
; 0000 008C // INT1: Off
; 0000 008D // INT2: On
; 0000 008E // INT2 Mode: Falling Edge
; 0000 008F GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0090 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0091 MCUCSR=(0<<ISC2);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0092 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0093 
; 0000 0094 lcd_init(16);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0095 
; 0000 0096 
; 0000 0097 #asm("sei")
;PCODE: $000000AB VOL: 0
	sei
;PCODE: $000000AC VOL: 0
; 0000 0098 
; 0000 0099 while (1)
;PCODE: $000000AD VOL: 0
; 0000 009A       {
; 0000 009B         //code
; 0000 009C       }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 009D 
; 0000 009E 
; 0000 009F }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
